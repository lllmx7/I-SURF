// L2L.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include "L2L.h"
#include "sad.h"
#include "Harris仿写.h"
#include "PnPsolver.h"
#include "_thread7.h"

#include "cv.h"
#include "cxcore.h"
#include "highgui.h"
using namespace cv;

#include <windows.h>
#include "time.h"
#include <string>


FILE *fppDx;
Mat L2L( Mat im0, Mat im0R, Mat im1, int if1stTime, Mat Tcw_es)//返回CV_32FC1数据类型 
{

	if(if1stTime==7)
	{
		cv::Mat Tcw=Mat(cvSize(4,4),CV_32FC1);
		Tcw=0;
		float *ptrF=(float *)Tcw.ptr(0);
		ptrF[0]=1;
		ptrF[5]=1;
		ptrF[2*Tcw.step/sizeof(float)+2]=1;
		ptrF[3*Tcw.step/sizeof(float)+3]=1;

//fpCal=fopen("fpCal.txt","wt+");
//fppDx=fopen("fppDx.txt","wt+");
		return Tcw;
	}
	
	//PnPsolver* pSolver = new PnPsolver( m000,matchesCountt,Pseries0,Pseries1,Pseries0X,Pseries0Y,Pseries1X,Pseries1Y,d0);
   //pSolver->SetRansacParameters( 0.7, 4, -1 , 17, 0.3 , 5.991, Tcw);//0.091表示内点占一共匹配数的百分比 
	cv::Mat Tcw = L2L000( im0, im0R, im1, Tcw_es);
/*if(Tcw.cols==0)
{
	cv::Mat Tcw1 = L2L111( im0, im0R, im1, Tcw_es);
	if(Tcw1.cols!=0)
	{
fprintf(fppDx,"\n%.0lf, %lf",(double)timeStamp, InliersP111);
	return Tcw1;
	}
}
*/
	//cv::Mat Tcw1 = L2L111( im0, im0R, im1, Tcw_es);
	return Tcw;
}



vector<KeyPoint> keypoints0,keypoints1;
featureP Pseries0lins[8887];
int d0[8887];
BFMatcher matcher(NORM_L1);
BFMatcher matcherH(NORM_HAMMING);
vector<DMatch> m000;
double InliersP000;
Mat L2L000( Mat im0L, Mat im0R, Mat im1L, Mat Tcw_es)
{
	///featureExtracting
	//vector<KeyPoint> keypoints0;
	keypoints0.clear();
	Mat descriptors0;
	featureExtractingORB( &keypoints0, &descriptors0, im0L);
	int CountPs0=keypoints0.size();
	for( int j=0;j<keypoints0.size();j++)
	{
		Pseries0lins[j].r=keypoints0[j].pt.y;
		Pseries0lins[j].c=keypoints0[j].pt.x;
	}
	//ocv_zhaod( d0, im0L, im0R, Pseries0lins, CountPs0, _19, 32);
	Mat dMat0=ocv_sgbm(im0L, im0R);
	ocv_zhaod222( d0, im0L, im0R, dMat0, Pseries0lins, CountPs0);
	//vector<KeyPoint> keypoints1;
	keypoints1.clear();
	Mat descriptors1;
	featureExtractingORB( &keypoints1, &descriptors1, im1L);

	///Matching 
	// matching descriptors
	m000.clear();
	if(keypoints0.size()>=1&& keypoints1.size()>=1)
	{
   matcherH.match(descriptors0, descriptors1, m000);
	for(int i=0;i<m000.size();i++)
		for(int j=0;j<m000.size()-1;j++)
		{
			if(m000[j].distance>=m000[j+1].distance)
			{
				DMatch m000lins=m000[j];
				m000[j]=m000[j+1];
				m000[j+1]=m000lins;
			}
		}
	int cutIdx=m000.size();
	for(int i=0;i<m000.size();i++)
	if(m000[i].distance>=1.5)
	{
		cutIdx=i;
		break;
	}
	//m000.resize(MIN(cutIdx,m000.size()));
	}
    // drawing the results
    namedWindow("matches", 1);
	 Mat img_matches;
    drawMatches( im0L, keypoints0, im1L, keypoints1, m000, img_matches);
	 //drawKeypoints( im0L, keypoints0, img_matches);
    imshow("matches", img_matches);
	 waitKey(0);
	 //string strm="img_matchesSURF_";
	 //strm=strm+timeStamp+".jpg";
	 char strm[87];
	 sprintf(strm,"img_matchesORB_%.0lf.jpg",(double)timeStamp);
	 imwrite(strm,img_matches);
	 /*for(int j=0;j<m000.size();j++)
	 {
	 m789.clear();
	 m789.push_back(m000[j]);
    Mat img_matches;
    drawMatches( im0L, keypoints0, im1L, keypoints1, m789, img_matches);
    imshow("matches", img_matches);
    waitKey(0);
	 }
	 */
		
	//Bucketing
	if(0)
	{
	vector<DMatch> m000_Bucketing[4][7];
	int bwX=im0L.cols/7;
	int bwY=im0L.rows/4;
	for(int i=0;i<m000.size();i++)
	{
		KeyPoint *kpt=&keypoints0[m000[i].queryIdx];
		int b=kpt->pt.y/bwY;
		int c=kpt->pt.x/bwX;
		m000_Bucketing[b][c].push_back(m000[i]);
	}
	m000.clear();
	for(int b=0;b<4;b++)
		for(int c=0;c<7;c++)
		{
			if(m000_Bucketing[b][c].size()>3)
			{
				/*//random选3个 
				srand( (unsigned)time( NULL ) );
				for(int iter=0;iter<3;iter++)
				{
				int idx=rand()%m000_Bucketing[b][c].size();
				m000.push_back(m000_Bucketing[b][c][idx]);
				m000_Bucketing[b][c][idx]=m000_Bucketing[b][c][m000_Bucketing[b][c].size()-1];
				m000_Bucketing[b][c].pop_back();
				}
				*/
				//按顺序 
				for(int i=0;i<m000_Bucketing[b][c].size();i++)
					for(int j=0;j<m000_Bucketing[b][c].size()-1;j++)
					{
						if(m000_Bucketing[b][c][j].distance>=m000_Bucketing[b][c][j+1].distance)
						{
							DMatch m000lins=m000_Bucketing[b][c][j];
							m000_Bucketing[b][c][j]=m000_Bucketing[b][c][j+1];
							m000_Bucketing[b][c][j+1]=m000lins;
						}
					}
				for(int i=0;i<3;i++)
					m000.push_back(m000_Bucketing[b][c][i]);
			}
			else
			{
			for(int i=0;i<m000_Bucketing[b][c].size();i++)
				m000.push_back(m000_Bucketing[b][c][i]);
			}
		}
	}

	return Mat();
	if(m000.size()<6)//都小于6了还算个啥啊
		return Mat();
	PnPsolver* pSolver = new PnPsolver( m000, keypoints0, keypoints1, d0);
   pSolver->SetRansacParameters( 0.7, 6, -1 , 6, 0.3, 5.991, Tcw_es);//0.091表示内点占一共匹配数的百分比 
	// Perform 4 Ransac Iterations
	vector<bool> vbInliers;
   int nInliers;
	Mat Tcw = pSolver->iterate(18887,vbInliers,nInliers);//287,vbInliers,nInliers);
InliersP000=(double)nInliers/m000.size();
	//keypoints0.clear();
   //vector<KeyPoint> (keypoints0).swap(keypoints0);
	//keypoints1.clear();
   //vector<KeyPoint> (keypoints1).swap(keypoints1);
	return Tcw;
}


featureP Pseries111_0[8887],Pseries111_1[8887],Pseries0X[8887],Pseries0Y[8887],Pseries1X[8887],Pseries1Y[8887];
int d0X[8887],d0Y[8887];
int ifpdx[8887];
vector<DMatch> m0X,m0Y;
vector<DMatch> m000SB0;
Match m111[8887];
double InliersP111;
Mat L2L111( Mat im0L, Mat im0R, Mat im1L, Mat Tcw_es)
{
	///featureExtracting
	//vector<KeyPoint> keypoints0;
	Mat descriptors0;
	featureExtractingSURF( &keypoints0, &descriptors0, im0L);
	for(int i=0;i<keypoints0.size();i++)
		Pseries111_0[i].kpt=keypoints0[i];
	int pCountt111_0=keypoints0.size();
	//vector<KeyPoint> keypoints1;
	Mat descriptors1;
	featureExtractingSURF( &keypoints1, &descriptors1, im1L);
	for(int i=0;i<keypoints1.size();i++)
		Pseries111_1[i].kpt=keypoints1[i];
	int pCountt111_1=keypoints1.size();

	Mat im0_int=Integral0( im0L);
	Mat im1_int=Integral0( im1L);
	Mat descriptors0X;
	int pCountt0X=featureExtractingHarrisDx( Pseries0X, &descriptors0X, im0L, im0_int);
	Mat descriptors0Y;
	int pCountt0Y=featureExtractingHarrisDy( Pseries0Y, &descriptors0Y, im0L, im0_int);
	Mat descriptors1X;
	int pCountt1X=featureExtractingHarrisDx( Pseries1X, &descriptors1X, im1L, im1_int);
	Mat descriptors1Y;
	int pCountt1Y=featureExtractingHarrisDy( Pseries1Y, &descriptors1Y, im1L, im1_int);

	for( int j=0;j<pCountt111_0;j++)
	{
		Pseries111_0[j].r=Pseries111_0[j].kpt.pt.y;
		Pseries111_0[j].c=Pseries111_0[j].kpt.pt.x;
	}
	//ocv_zhaod( d0, im0L, im0R, Pseries111_0, pCountt111_0, _19, 32);
	Mat dMat0=ocv_sgbm(im0L, im0R);
	ocv_zhaod222( d0, im0L, im0R, dMat0, Pseries111_0, pCountt111_0);
	for( int j=0;j<pCountt0X;j++)
	{
		Pseries0X[j].r=Pseries0X[j].kpt.pt.y;
		Pseries0X[j].c=Pseries0X[j].kpt.pt.x;
	}
	//ocv_zhaod( d0X, im0L, im0R, Pseries0X, pCountt0X, _19, 32);
	ocv_zhaod222( d0X, im0L, im0R, dMat0, Pseries0X, pCountt0X);
	for( int j=0;j<pCountt0Y;j++)
	{
		Pseries0Y[j].r=Pseries0Y[j].kpt.pt.y;
		Pseries0Y[j].c=Pseries0Y[j].kpt.pt.x;
	}
	//ocv_zhaod( d0Y, im0L, im0R, Pseries0Y, pCountt0Y, _19, 32);
	ocv_zhaod222( d0Y, im0L, im0R, dMat0, Pseries0Y, pCountt0Y);

	///Matching 
	memset( ifpdx, 0x00, (pCountt111_0+pCountt0X+pCountt0Y)*sizeof(int));
	// matching descriptors
	m000SB0.clear();
	m000.clear();
	if(keypoints0.size()>=1&& keypoints1.size()>=1)
	{
   matcher.match(descriptors0, descriptors1, m000);
	for(int i=0;i<m000.size();i++)
		for(int j=0;j<m000.size()-1;j++)
		{
			if(m000[j].distance>=m000[j+1].distance)//小的排前面 
			{
				DMatch m000lins=m000[j];
				m000[j]=m000[j+1];
				m000[j+1]=m000lins;
			}
		}
	m000.resize(MIN(m000.size(),87));
	for(int i=0;i<m000.size();i++)
		m000SB0.push_back(m000[i]);
	}
	int idxEnd=m000.size();
	//
	m0X.clear();
	if(pCountt0X>=1&& pCountt1X>=1)
	{
	matcher.match(descriptors0X, descriptors1X, m0X);
	for(int i=0;i<m0X.size();i++)
		for(int j=0;j<m0X.size()-1;j++)
		{
			if(m0X[j].distance>=m0X[j+1].distance)//小的排前面 
			{
				DMatch m0Xlins=m0X[j];
				m0X[j]=m0X[j+1];
				m0X[j+1]=m0Xlins;
			}
		}
	m0X.resize(MIN(m0X.size(),87));
	for(int i=0;i<m0X.size();i++)
		m000SB0.push_back(m0X[i]);
	for(int i=0;i<m0X.size();i++)
		ifpdx[idxEnd+i]=pianDX;
	idxEnd=m000SB0.size();
	}
	//
	m0Y.clear();
	if(pCountt0Y>=1&& pCountt1Y>=1)
	{
	matcher.match(descriptors0Y, descriptors1Y, m0Y);
	for(int i=0;i<m0Y.size();i++)
		for(int j=0;j<m0Y.size()-1;j++)
		{
			if(m0Y[j].distance>=m0Y[j+1].distance)//小的排前面 
			{
				DMatch m0Ylins=m0Y[j];
				m0Y[j]=m0Y[j+1];
				m0Y[j+1]=m0Ylins;
			}
		}
	m0Y.resize(MIN(m0Y.size(),87));
	for(int i=0;i<m0Y.size();i++)
		m000SB0.push_back(m0Y[i]);
	for(int i=0;i<m0Y.size();i++)
		ifpdx[idxEnd+i]=pianDY;
	}
	
	for(int i=0;i<m000SB0.size();i++)
		for(int j=0;j<m000SB0.size()-1;j++)
		{
			if(m000SB0[j].distance>=m000SB0[j+1].distance)//小的排前面 
			{
				DMatch m000lins=m000SB0[j];
				m000SB0[j]=m000SB0[j+1];
				m000SB0[j+1]=m000lins;
				int ifptt=ifpdx[j];
				ifpdx[j]=ifpdx[j+1];
				ifpdx[j+1]=ifptt;
			}
		}
	int cutIdx=m000SB0.size();
	for(int i=0;i<m000SB0.size();i++)
	if(m000SB0[i].distance>=1.3)//1.5)
	{
		cutIdx=i;
		break;
	}
	m000SB0.resize(MIN(cutIdx,m000SB0.size()));
    // drawing the results
    namedWindow("matches", 1);
	 Mat img_matches;
    drawMatches( im0L, keypoints0, im1L, keypoints1, m000, img_matches);
    //imshow("matches", img_matches);
    //waitKey(0);

	 vector<DMatch> m789;
	 m789.clear();
	 vector<KeyPoint> pts0,pts1;
	 pts0.clear();
	 pts1.clear();
	 for(int j=0;j<m000SB0.size();j++)
	 {
	 if(ifpdx[j]==pianDX)
	 {
		 pts0.push_back(Pseries0X[m000SB0[j].queryIdx].kpt);
		 pts1.push_back(Pseries1X[m000SB0[j].trainIdx].kpt);
		 DMatch matchlins;
		 matchlins.queryIdx=pts0.size()-1;
		 matchlins.trainIdx=pts1.size()-1;
		 m789.push_back(matchlins);
	 }
	 }
	 Mat im0Ljiajia=Mat(cvSize(im0L.cols,im0L.rows),CV_8UC3);
	 Mat im1Ljiajia=Mat(cvSize(im0L.cols,im0L.rows),CV_8UC3);
	 int w=3;
	 for(int r=0;r<im0L.rows;r++)
	 {
		 unsigned char *ptr0,*ptr1,*ptr2,*ptr3;
		 ptr0=img_matches.ptr(r);
		 ptr1=img_matches.ptr(r)+im0L.cols*w;
		 ptr2=im0Ljiajia.ptr(r);
		 ptr3=im1Ljiajia.ptr(r);
		 for(int c=0;c<im0L.cols;c++)
		 {
			 ptr2[0]=ptr0[0];
			 ptr3[0]=ptr1[0];
			 ptr2[1]=ptr0[1];
			 ptr3[1]=ptr1[1];
			 ptr2[2]=ptr0[2];
			 ptr3[2]=ptr1[2];
			 ptr0=ptr0+w;
			 ptr1=ptr1+w;
			 ptr2=ptr2+w;
			 ptr3=ptr3+w;
		 }
	 }
	 drawMatches( im0Ljiajia, pts0, im1Ljiajia, pts1, m789, img_matches);

	 m789.clear();
	 pts0.clear();
	 pts1.clear();
	 for(int j=0;j<m000SB0.size();j++)
	 {
	 if(ifpdx[j]==pianDY)
	 {
		 m789.clear();
		 pts0.push_back(Pseries0Y[m000SB0[j].queryIdx].kpt);
		 pts1.push_back(Pseries1Y[m000SB0[j].trainIdx].kpt);
		 DMatch matchlins;
		 matchlins.queryIdx=pts0.size()-1;
		 matchlins.trainIdx=pts1.size()-1;
		 m789.push_back(matchlins);
	 }
	 }
	 for(int r=0;r<im0L.rows;r++)
	 {
		 unsigned char *ptr0,*ptr1,*ptr2,*ptr3;
		 ptr0=img_matches.ptr(r);
		 ptr1=img_matches.ptr(r)+im0L.cols*w;
		 ptr2=im0Ljiajia.ptr(r);
		 ptr3=im1Ljiajia.ptr(r);
		 for(int c=0;c<im0L.cols;c++)
		 {
			 ptr2[0]=ptr0[0];
			 ptr3[0]=ptr1[0];
			 ptr2[1]=ptr0[1];
			 ptr3[1]=ptr1[1];
			 ptr2[2]=ptr0[2];
			 ptr3[2]=ptr1[2];
			 ptr0=ptr0+w;
			 ptr1=ptr1+w;
			 ptr2=ptr2+w;
			 ptr3=ptr3+w;
		 }
	 }
	 drawMatches( im0Ljiajia, pts0, im1Ljiajia, pts1, m789, img_matches);
	 imshow("matches", img_matches);
	 waitKey(0);
	 //string strm="img_matchesSURF_";
	 //strm=strm+timeStamp+".jpg";
	 char strm[87];
	 sprintf(strm,"img_matchesSURF++_%.0lf.jpg",(double)timeStamp);
	 imwrite(strm,img_matches);
	 /*{
	 case DXDY:
		 pts0.push_back(Pseries111_0[m000SB0[j].queryIdx].kpt);
		 pts1.push_back(Pseries111_1[m000SB0[j].trainIdx].kpt);
		 break;
	 case pianDX:
		 pts0.push_back(Pseries0X[m000SB0[j].queryIdx].kpt);
		 pts1.push_back(Pseries1X[m000SB0[j].trainIdx].kpt);
		 break;
	 case pianDY:
		 pts0.push_back(Pseries0Y[m000SB0[j].queryIdx].kpt);
		 pts1.push_back(Pseries1Y[m000SB0[j].trainIdx].kpt);
		 break;
	 default:
		 pts0.push_back(Pseries111_0[m000SB0[j].queryIdx].kpt);
		 pts1.push_back(Pseries111_1[m000SB0[j].trainIdx].kpt);
		 break;
	 }
	 */

	int leaveOut=_19;
	int searchWithin=1.5*_19;
	int matchesCountt=0;
	for(int i=0;i<m000SB0.size();i++)
	{

					int idx1=m000SB0[i].trainIdx;
					//if(ABS(Pseries1[idx1].kpt.pt.x-p1_es.c)<searchWithin&& ABS(Pseries1[idx1].kpt.pt.y-p1_es.r)<searchWithin)
					{
						m111[matchesCountt].idx0=m000SB0[i].queryIdx;
						m111[matchesCountt].idx1=idx1;
						m111[matchesCountt].ifpdx=ifpdx[i];
						matchesCountt++;
					}

	}

	//Bucketing
	if(0)
	{
	vector<Match> m111_Bucketing[4][7];
	int bwX=im0L.cols/7;
	int bwY=im0L.rows/4;
	for(int i=0;i<matchesCountt;i++)
	{
		KeyPoint *kpt;//=&keypoints0[m111[i].queryIdx];
		switch(m111[i].ifpdx)
		{
		case DXDY:kpt=&Pseries111_0[m111[i].idx0].kpt;break;
		case pianDX:kpt=&Pseries0X[m111[i].idx0].kpt;break;
		case pianDY:kpt=&Pseries0Y[m111[i].idx0].kpt;break;
		default:kpt=&Pseries111_0[m111[i].idx0].kpt;break;
		}
		int b=kpt->pt.y/bwY;
		int c=kpt->pt.x/bwX;
		m111_Bucketing[b][c].push_back(m111[i]);
	}
	matchesCountt=0;
	for(int b=0;b<4;b++)
		for(int c=0;c<7;c++)
		{
			if(m111_Bucketing[b][c].size()>3)
			{
				//random选3个 
				srand( (unsigned)time( NULL ) );
				for(int iter=0;iter<3;iter++)
				{
				int idx=rand()%m111_Bucketing[b][c].size();
				m111[matchesCountt]=m111_Bucketing[b][c][idx];
				matchesCountt++;
				m111_Bucketing[b][c][idx]=m111_Bucketing[b][c][m111_Bucketing[b][c].size()-1];
				m111_Bucketing[b][c].pop_back();
				}
			}
			else
			{
			for(int i=0;i<m111_Bucketing[b][c].size();i++)
			{
				m111[matchesCountt]=m111_Bucketing[b][c][i];
				matchesCountt++;
			}
			}
		}
	}

	return Mat();
	if(matchesCountt<6)//都小于6了还算个啥啊
		return Mat();
	PnPsolver* pSolver = new PnPsolver( im0L, im1L, m111,matchesCountt,Pseries111_0,Pseries111_1,Pseries0X,Pseries1X,Pseries0Y,Pseries1Y,d0,d0X,d0Y);
   pSolver->SetRansacParameters( 0.7, 6, -1 , 6, 0.3, 5.991, Tcw_es);//0.091表示内点占一共匹配数的百分比 
	// Perform 4 Ransac Iterations
	vector<bool> vbInliers;
   int nInliers;
	Mat Tcw = pSolver->iterate(1887,vbInliers,nInliers);//287,vbInliers,nInliers);
InliersP111=(double)nInliers/matchesCountt;
	return Tcw;
}


int ocv_zhaod( int *d1, Mat im1L, Mat im1R, featureP *Pseries1, int CounttPs1, int _19, int dMAX)
{
	int halfWindow=_19/2;
	unsigned char local0[39][39],local1[39][39];
	int cha[39][39];
	for(int j=0;j<CounttPs1;j++)
	{
		featureP *p1=&Pseries1[j];

		for(int m=0,p=p1->r-halfWindow;m<_19;m++,p++)
		{
			uchar *pl0=im1L.ptr(p);
			for(int n=0,q=p1->c-halfWindow;n<_19;n++,q++)
				local0[m][n]=pl0[q];
		}

		int chaMIN=88888889;
		int d=-1;
		for(int offset=0;offset<dMAX;offset++)
		{
			if(p1->c-halfWindow-offset>=0)
			{
			int chasumAbs=0;
			for(int m=0,p=p1->r-halfWindow;m<_19;m++,p++)
			{
				uchar *pr0=im1R.ptr(p);
				for(int n=0,q=p1->c-halfWindow-offset;n<_19;n++,q++)
					chasumAbs=chasumAbs+ABS(pr0[q]-local0[m][n]);
			}

			if(chasumAbs<chaMIN)
			{
				chaMIN=chasumAbs;
				d=offset;
			}
			}
		}
		
		d1[j]=d;
	}

	return -1;
}


int ocv_zhaod222( int *d0, Mat im0L, Mat im0R, Mat dMat, featureP *Pseries0, int CounttPs0)
{

	for(int j=0;j<CounttPs0;j++)
	{
		featureP *p0=&Pseries0[j];
		int *ptr_dMat=(int *)dMat.ptr(p0->r);
		d0[j]=ptr_dMat[p0->c];
	}
	return -1;
}


//opencv中BM算法获得视差图//就是sad 
//int d0=14.9/640*640;//disparity修正、和图片大小有关 
Mat ocv_bm(Mat left0, Mat right0){

	Mat disp,disp7,disp8;

	static cv::StereoBM sbm;

    sbm.state->SADWindowSize = 19;
	 sbm.state->numberOfDisparities = (left0.cols/3>>4)<<4;//112;

//open cv左面一大块黑边不作匹配，所以要先加宽一些把那个让过去 
	 //左面加宽 
	 Mat leftEX,rightEX;
	 copyMakeBorder(left0, leftEX, 0, 0, sbm.state->numberOfDisparities, 0, IPL_BORDER_REPLICATE);
	 copyMakeBorder(right0, rightEX, 0, 0, sbm.state->numberOfDisparities, 0, IPL_BORDER_REPLICATE);

	 sbm.state->uniquenessRatio = 9;//5;

	 //sbm.state->preFilterType; // =CV_STEREO_BM_NORMALIZED_RESPONSE now
    //sbm.state->preFilterSize=5; // averaging window size: ~5x5..21x21
    //sbm.state->preFilterCap=31; // the output of pre-filtering is clipped by [-preFilterCap,preFilterCap]
    /*bm.state->textureThreshold = 10;
    bm.state->speckleWindowSize = 100;
    bm.state->speckleRange = 32;
    bm.state->disp12MaxDiff = 1
	 */

    sbm(leftEX, rightEX, disp);///////////////////////////////////////////////////////////////////视差计算函数在这里 
	 //cvFindStereoCorrespondenceBM(
	 // 截取与原始画面对应的视差区域（舍去加宽的部分）
	 disp7 = disp.colRange(sbm.state->numberOfDisparities, disp.cols);
//imshow("ooo", disp);
/*FILE *fp7;
fp7=fopen("disp7.txt","wt+");
int dat;
unsigned char *ptr0,*ptr1;
int w=disp7.step/disp7.cols;
for(int r=0;r<disp7.rows;r++)
{
fprintf( fp7, "\n");
ptr0=disp7.ptr<uchar>(r);
for(int c=0;c<disp7.cols;c++)
{
if(ptr0[c*w+1]&0x80)//负的
	dat=0;
else
dat=(ptr0[c*w]+((int)ptr0[c*w+1]<<8))>>4;
fprintf( fp7, "%d, ", dat);
}
}
*/
    //normalize(disp7, disp8, 0.1, 255, CV_MINMAX, CV_8UC1);

//open cv的结果大了16倍，这里换算成真实视差图、没匹配上的视差=-1 
	 Mat disp_bmCV_32SC1=Mat( disp7.size(), CV_32SC1);
	 unsigned char *ptr0;
	 int *p1Int32;
	 int w=2;//返回int16
	 for(int r=0;r<disp7.rows;r++)
	 {
		ptr0=disp7.ptr(r);
		p1Int32=(int *)disp_bmCV_32SC1.ptr(r);
		for(int c=0;c<disp7.cols;c++)
		{
			if(ptr0[1]&0x80)//负的
				p1Int32[c]=-1;
			else
			p1Int32[c]=(ptr0[0]+((int)ptr0[1]<<8))>>4;

			ptr0=ptr0+w;
		}
	 }
/*FILE *fp7;
fp7=fopen("disp_bmCV_32SC1.txt","wt+");
int dat;
//unsigned char *ptr0,*ptr1;
for(int r=0;r<disp_bmCV_32SC1.rows;r++)
{
fprintf( fp7, "\n");
ptr0=disp_bmCV_32SC1.ptr<uchar>(r);
for(int c=0;c<disp_bmCV_32SC1.cols;c++)
{
dat=ptr0[c];
fprintf( fp7, "%d, ", dat);
}
}
*/
	///视差修正 
	return disp_bmCV_32SC1;
}


//opencv中SGBM算法获得视差图
Mat ocv_sgbm(Mat left,Mat right){

	Mat disp;
	static cv::StereoSGBM sgbm;
	//sgbm参数设置
	sgbm.SADWindowSize=9;
	sgbm.numberOfDisparities=32;
	sgbm.uniquenessRatio=9;//5;

	sgbm.preFilterCap=31;	
	sgbm.P1=4*sgbm.SADWindowSize*sgbm.SADWindowSize;
	sgbm.P2=32*sgbm.SADWindowSize*sgbm.SADWindowSize;
	
	//sgbm.speckleWindowSize=-1;
	sgbm.disp12MaxDiff=-1;
	sgbm.fullDP=false;

	sgbm(left,right,disp);

	//disp.convertTo(disp8,CV_8U,255/(sgbm.numberOfDisparities*16.));
	//还要把结果除16才是实际上的视差 
	//disp.convertTo(disp8,CV_8UC1,1/16.);
	 Mat disp_bm_Int32=Mat( disp.size(), CV_32SC1);
	 unsigned char *ptr0;
	 int *p1Int32;
	 int w=2;//返回int16
	 for(int r=0;r<disp_bm_Int32.rows;r++)
	 {
		ptr0=disp.ptr(r);
		p1Int32=(int *)disp_bm_Int32.ptr(r);
		for(int c=0;c<disp_bm_Int32.cols;c++)
		{
			if(ptr0[1]&0x80)//负的
				p1Int32[c]=-1;
			else
			p1Int32[c]=(((int)ptr0[1]<<8)+ptr0[0])>>4;

			ptr0=ptr0+w;
		}
	 }

	return disp_bm_Int32;
}


Mat TcwTransform( Mat tr4007, Mat Tcw)
{
	Mat invTcw;
	invert(Tcw,invTcw);
	Mat tr4007gai;
	tr4007gai=tr4007*invTcw;
	/*Mat tr4007gai;
	tr4007gai.create(tr4007.size(),CV_32FC1);
	tr4007gai=0;
	float *ptrF0,*ptrF1,*ptrF2;
	ptrF1=(float *)tr4007.ptr(0);
	for(int i=0;i<4;i++)
	{
		ptrF0=(float *)invTcw.ptr(i);
		ptrF2=(float *)tr4007gai.ptr(i);
		for(int j=0;j<4;j++)
		{
			for(int k=0;k<4;k++)
				ptrF2[j]=ptrF2[j]+ptrF0[k]*ptrF1[k*tr4007.step/sizeof(float)+j];
		}
	}
	*/
	return tr4007gai;
}
